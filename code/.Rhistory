mvc = as.numeric(mvc),
date = as.numeric(names(x)[[i]]))
}
)
pump <- bind_rows(tidypump)
pump
pump %>%
ggplot(aes(x = t, y = mvc)) +
geom_point(alpha = .5, size = .75) +
facet_wrap(~date)
pump <- pump %>%
#first 3 runs had starting sediment mass of 100g rather than 200g
filter(date > 181005) %>%
#we can't use runs without sediment mass
filter(as.character(date) %in% trapdate)
length(unique(pump$date))
metadata <- read_csv("../data/run_metadata.csv")
sum(unique(pump$date) %in% metadata$date)
pump <- left_join(pump, metadata, by = "date")
pump %>%
filter(growth_days==0) %>%
ggplot(aes(x = t, y = mvc)) +
geom_point(alpha = .5, size = .75) +
geom_rect(data = filter(pump, date == 190417),
fill = NA, colour = "red", xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf) +
facet_wrap(~date) +
scale_x_continuous(breaks = c(0,3000,6000), limits = c(0,6000))
pumpfinal <- pump %>%
filter(growth_days==0, date != 190417, dowel_density != "0232")
pumpfinal %>%
ggplot(aes(x = t, y = mvc)) +
geom_point(alpha = .5, size = .75) +
facet_grid(pump_freq~dowel_density) +
scale_x_continuous(breaks = c(0,3000,6000), limits = c(0,6000))
trapdata <- lapply(trapfiles, function(x) read_csv(paste0("../data/sediment traps/",x)))
names(trapdata) <- trapdate
x <- trapdata
tidytrap <- lapply(seq_along(x), function(i) {
select(x[[i]], station = 1, pre = contains("pre"), post = contains("post"), sed = contains("sed")) %>%
mutate(date = names(x)[i]) %>%
mutate_at(vars(pre,post,sed,date), as.numeric)
}
)
trap <- bind_rows(tidytrap) %>%
filter(!is.na(sed))
trap
lm(sed~station, data = trap) %>% summary()
trap %>%
group_by(date) %>%
mutate(mean = mean(sed)) %>%
arrange(mean) %>%
ggplot(aes(x = factor(date, levels = unique(date)), y = sed)) +
geom_boxplot() +
labs(x = "date", y = "sediment mass (mg/trap)") +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
trapfinal <- left_join(trap, metadata, by = "date") %>%
filter(date %in% pumpfinal$date)
trapfinal %>%
group_by(date) %>%
mutate(mean = mean(sed)) %>%
arrange(mean) %>%
ggplot(aes(x = factor(date, levels = unique(date)), y = sed)) +
geom_boxplot() +
labs(x = "date", y = "sediment mass (mg/trap)") +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
# flows in ml/s:
flow <- c(131, 132, 132, 131, 134, 129, 130, 129, 130, 129, 130, 127, 127, 127, 126,
123, 126, 125, 124, 125, 127, 125, 123, 122, 125, 124, 118, 123, 125, 125,
120, 122, 124, 126, 122, 117, 123, 118, 120, 120, 121, 118, 118, 118, 119,
118, 120, 117, 117, 114, 115, 115, 116, 112, 112, 110, 111, 108, 105, 105,
102, 100, 100, 102)
# times in fractional hrs of day:
time <- c(12.13333, 12.21667, 12.28333, 12.41667, 12.5, 12.56667, 12.6, 13.11667,
13.15, 13.18333, 13.58333, 13.61667, 13.65, 14.25, 14.28333, 14.31667,
14.35, 14.38333, 14.68333, 14.71667, 14.75, 14.78333, 14.81667, 14.85,
14.88333, 14.93333, 15.35, 15.38333, 15.41667, 15.45, 15.48333, 15.76667,
15.8, 15.86667, 15.9, 15.93333, 15.96667, 16.18333, 16.23333, 16.28333,
16.31667, 16.33333, 16.36667, 16.55, 16.58333, 16.61667, 16.81667, 16.85,
16.9, 16.93333, 16.98333, 17.03333, 17.06667, 17.2, 17.23333, 17.35,
17.36667, 17.53333, 17.58333, 17.61667, 17.73333, 17.75, 17.78333, 17.8)
#flow start time:
t_0 <- 11.59166667
#time at which flume was drained to top of test-array holding basin
t_b <- 16.96666667
#time at which basin was drained
t_f <- 17.825
#polynomial model fits:
fits <- lapply(1:4, function(x) {lm(flow ~ poly(time, x, raw = TRUE))})
#finite integral calculator
poly_fin_integr <- function(model,lim1,lim2) {
sum(coefficients(model)/(1:length(coefficients(model)))*
lim2^(1:length(coefficients(model))))-
sum(coefficients(model)/(1:length(coefficients(model)))*
lim1^(1:length(coefficients(model))))
}
estimates <- lapply(fits, function(x) poly_fin_integr(x, lim1 = t_0, lim2 = t_b))
#convert from mL/s*h to cubic m: 1 mL/s*h = 3600 mL = 3.6 L = 0.0036 cubic m
estimates <- unlist(estimates)*.0036
names(estimates) <- c("linear", "quadratic", "cubic", "4th order")
estimates
library(lme4)
fits <- lmList(data = pumpfinal, log(mvc)~t | date)
summary(fits)
cbind(pumpfinal, pred = predict(fits)) %>%
ggplot() +
geom_point(aes(x = t, y = mvc), size = .75, alpha = .5) +
geom_line(aes(x = t, y = exp(pred)), color = "red") +
facet_grid(pump_freq~dowel_density) +
scale_x_continuous(breaks = c(0,3000,6000), limits = c(0,6000))
knitr::opts_chunk$set(echo = TRUE, fig.pos = "!H", out.extra = "")
library(tidyverse)
pumpfiles <- list.files("../data/peristaltic pumps/")
trapfiles <- list.files("../data/sediment traps/")
length(pumpfiles)
length(trapfiles)
pumpdate <- str_sub(pumpfiles,0,6)
trapdate <- str_sub(trapfiles,0,6)
tibble(pumpdate, pumpdate %in% trapdate)
pumpdata <- lapply(pumpfiles, function(x) read_csv(paste0("../data/peristaltic pumps/",x)))
names(pumpdata) <- pumpdate
x <- pumpdata
tidypump <- lapply(seq_along(x), function(i) {
select(x[[i]],
loc = Location,
ht = Height,
t = `time series`,
mvc = contains("(ppm)")) %>%
filter(t < 21) %>% #filter a few timepoints outside the normal window
mutate(t = (t-min(t)+1)*300, #convert from timestep to seconds
mvc = as.numeric(mvc),
date = as.numeric(names(x)[[i]])) %>%
filter(!is.na(mvc))
}
)
pump <- bind_rows(tidypump)
pump
pump %>%
ggplot(aes(x = t, y = mvc)) +
geom_point(alpha = .5, size = .75) +
facet_wrap(~date)
pump <- pump %>%
#first 3 runs had starting sediment mass of 100g rather than 200g
filter(date > 181005) %>%
#we can't use runs without sediment mass
filter(as.character(date) %in% trapdate)
length(unique(pump$date))
metadata <- read_csv("../data/run_metadata.csv")
sum(unique(pump$date) %in% metadata$date)
pump <- left_join(pump, metadata, by = "date")
pump %>%
filter(growth_days==0) %>%
ggplot(aes(x = t, y = mvc)) +
geom_point(alpha = .5, size = .75) +
geom_rect(data = filter(pump, date == 190417),
fill = NA, colour = "red", xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf) +
facet_wrap(~date) +
scale_x_continuous(breaks = c(0,3000,6000), limits = c(0,6000))
pumpfinal <- pump %>%
filter(growth_days==0, date != 190417, dowel_density != "0232")
pumpfinal %>%
ggplot(aes(x = t, y = mvc)) +
geom_point(alpha = .5, size = .75) +
facet_grid(pump_freq~dowel_density) +
scale_x_continuous(breaks = c(0,3000,6000), limits = c(0,6000))
trapdata <- lapply(trapfiles, function(x) read_csv(paste0("../data/sediment traps/",x)))
names(trapdata) <- trapdate
x <- trapdata
tidytrap <- lapply(seq_along(x), function(i) {
select(x[[i]], station = 1, pre = contains("pre"), post = contains("post"), sed = contains("sed")) %>%
mutate(date = names(x)[i]) %>%
mutate_at(vars(pre,post,sed,date), as.numeric)
}
)
trap <- bind_rows(tidytrap) %>%
filter(!is.na(sed))
trap
lm(sed~station, data = trap) %>% summary()
trap %>%
group_by(date) %>%
mutate(mean = mean(sed)) %>%
arrange(mean) %>%
ggplot(aes(x = factor(date, levels = unique(date)), y = sed)) +
geom_boxplot() +
labs(x = "date", y = "sediment mass (mg/trap)") +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
trapfinal <- left_join(trap, metadata, by = "date") %>%
filter(date %in% pumpfinal$date)
trapfinal %>%
group_by(date) %>%
mutate(mean = mean(sed)) %>%
arrange(mean) %>%
ggplot(aes(x = factor(date, levels = unique(date)), y = sed)) +
geom_boxplot() +
labs(x = "date", y = "sediment mass (mg/trap)") +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
# flows in ml/s:
flow <- c(131, 132, 132, 131, 134, 129, 130, 129, 130, 129, 130, 127, 127, 127, 126,
123, 126, 125, 124, 125, 127, 125, 123, 122, 125, 124, 118, 123, 125, 125,
120, 122, 124, 126, 122, 117, 123, 118, 120, 120, 121, 118, 118, 118, 119,
118, 120, 117, 117, 114, 115, 115, 116, 112, 112, 110, 111, 108, 105, 105,
102, 100, 100, 102)
# times in fractional hrs of day:
time <- c(12.13333, 12.21667, 12.28333, 12.41667, 12.5, 12.56667, 12.6, 13.11667,
13.15, 13.18333, 13.58333, 13.61667, 13.65, 14.25, 14.28333, 14.31667,
14.35, 14.38333, 14.68333, 14.71667, 14.75, 14.78333, 14.81667, 14.85,
14.88333, 14.93333, 15.35, 15.38333, 15.41667, 15.45, 15.48333, 15.76667,
15.8, 15.86667, 15.9, 15.93333, 15.96667, 16.18333, 16.23333, 16.28333,
16.31667, 16.33333, 16.36667, 16.55, 16.58333, 16.61667, 16.81667, 16.85,
16.9, 16.93333, 16.98333, 17.03333, 17.06667, 17.2, 17.23333, 17.35,
17.36667, 17.53333, 17.58333, 17.61667, 17.73333, 17.75, 17.78333, 17.8)
#flow start time:
t_0 <- 11.59166667
#time at which flume was drained to top of test-array holding basin
t_b <- 16.96666667
#time at which basin was drained
t_f <- 17.825
#polynomial model fits:
fits <- lapply(1:4, function(x) {lm(flow ~ poly(time, x, raw = TRUE))})
#finite integral calculator
poly_fin_integr <- function(model,lim1,lim2) {
sum(coefficients(model)/(1:length(coefficients(model)))*
lim2^(1:length(coefficients(model))))-
sum(coefficients(model)/(1:length(coefficients(model)))*
lim1^(1:length(coefficients(model))))
}
estimates <- lapply(fits, function(x) poly_fin_integr(x, lim1 = t_0, lim2 = t_b))
#convert from mL/s*h to cubic m: 1 mL/s*h = 3600 mL = 3.6 L = 0.0036 cubic m
estimates <- unlist(estimates)*.0036
names(estimates) <- c("linear", "quadratic", "cubic", "4th order")
estimates
library(lme4)
fits <- lmList(data = pumpfinal, log(mvc)~t | date)
summary(fits)
cbind(pumpfinal, pred = predict(fits)) %>%
ggplot() +
geom_point(aes(x = t, y = mvc), size = .75, alpha = .5) +
geom_line(aes(x = t, y = exp(pred)), color = "red") +
facet_grid(pump_freq~dowel_density) +
scale_x_continuous(breaks = c(0,3000,6000), limits = c(0,6000))
cbind(pumpfinal, resid = residuals(fits)) %>%
ggplot(aes(x = t, y = resid)) +
geom_point() +
geom_smooth()
fitdata <- coefficients(fits) %>%
cbind(date = as.numeric(row.names(coefficients(fits)))) %>%
left_join(metadata, by = "date")
fitdata %>%
ggplot(aes(x = dowel_density, y = pump_freq, fill = -t, label = round(-t,7))) +
geom_tile() +
geom_text() +
scale_fill_gradient(low = "red", high = "white")
fitdata[fitdata$date==190802,"t"] <- (fitdata[fitdata$date==190729,"t"] +
fitdata[fitdata$date==190321,"t"])/2
fitdata
hist(trapfinal$sed, breaks = 10, density = 10)
final <- trapfinal %>%
group_by(date) %>%
summarise(m_trap = mean(sed)/1000) %>% #average sediment in trap converted from mg to g
mutate(m_s = m_trap*1.95*.6/(pi*.0127^2)) %>% #times test section area divided by area of 1 trap
left_join(fitdata, by = "date") %>%
mutate(k_s = m_s/200/(1-exp(t*6000))*(-t))
final %>%
ggplot(aes(x = dowel_density, y = pump_freq, fill = k_s, label = round(k_s,7))) +
geom_tile() +
geom_text() +
scale_fill_gradient(low = "red", high = "white")
final[final$date==190802,"k_s"] <- (final[final$date==190729,"k_s"] +
final[final$date==190321,"k_s"])/2
bgvals <- final %>%
filter(dowel_density=="0000") %>%
transmute(pump_freq, k_bg = -t - k_s) %>%
arrange(pump_freq)
bgvals
final <- left_join(final, bgvals, by = "pump_freq")
final <- final %>%
mutate(k_c = -t - k_s - k_bg)
final %>%
ggplot(aes(x = dowel_density, y = pump_freq, fill = k_c, label = round(k_c,7))) +
geom_tile() +
geom_text() +
scale_fill_gradient(low = "red", high = "white")
final %>%
ggplot(aes(x = as.numeric(pump_freq), y = k_c, color = dowel_density)) +
geom_line()
#temp in flume measured at 22.2C with a calibrated thermometer
#plugged into https://www.engineeringtoolbox.com/water-dynamic-kinematic-viscosity-d_596.html
visc = 9.509e-7 #kinematic viscosity, m2/s
d = .003175 #dowel diameter
final <- final %>%
transmute(frontal_area = as.numeric(dowel_density)*.003175,
u = as.numeric(pump_freq)/500, #velocity
Re = u*.003175/visc, #Reynolds #
k_t = -t,
k_c, k_s, k_bg) %>%
mutate(eta = k_c/u/frontal_area) %>%
mutate(eta = eta * 2.43/(1.95*.4*.6)) # don't forget to correct for time out of test section!
final %>%
filter(frontal_area != 0) %>%
ggplot(aes(x = Re, y = eta, color = factor(frontal_area))) +
geom_line() +
geom_point()
final <- trapfinal %>%
group_by(date) %>%
summarise(m_trap = mean(sed)/1000) %>% #average sediment in trap converted from mg to g
mutate(m_s = m_trap*1.95*.6/(pi*.0127^2)) %>% #times test section area divided by area of 1 trap
left_join(fitdata, by = "date") %>%
mutate(k_s = m_s/200/(1-exp(t*6000))*(-t))
final
final %>%
ggplot(aes(x = dowel_density, y = pump_freq, fill = k_s, label = round(k_s,7))) +
geom_tile() +
geom_text() +
scale_fill_gradient(low = "red", high = "white")
knitr::opts_chunk$set(echo = TRUE, fig.pos = "!H", out.extra = "")
library(tidyverse)
pumpfiles <- list.files("../data/peristaltic pumps/")
trapfiles <- list.files("../data/sediment traps/")
length(pumpfiles)
length(trapfiles)
pumpdate <- str_sub(pumpfiles,0,6)
trapdate <- str_sub(trapfiles,0,6)
tibble(pumpdate, pumpdate %in% trapdate)
pumpdata <- lapply(pumpfiles, function(x) read_csv(paste0("../data/peristaltic pumps/",x)))
names(pumpdata) <- pumpdate
x <- pumpdata
tidypump <- lapply(seq_along(x), function(i) {
select(x[[i]],
loc = Location,
ht = Height,
t = `time series`,
mvc = contains("(ppm)")) %>%
filter(t < 21) %>% #filter a few timepoints outside the normal window
mutate(t = (t-min(t)+1)*300, #convert from timestep to seconds
mvc = as.numeric(mvc),
date = as.numeric(names(x)[[i]])) %>%
filter(!is.na(mvc))
}
)
pump <- bind_rows(tidypump)
pump
pump %>%
ggplot(aes(x = t, y = mvc)) +
geom_point(alpha = .5, size = .75) +
facet_wrap(~date)
pump <- pump %>%
#first 3 runs had starting sediment mass of 100g rather than 200g
filter(date > 181005) %>%
#we can't use runs without sediment mass
filter(as.character(date) %in% trapdate)
length(unique(pump$date))
metadata <- read_csv("../data/run_metadata.csv")
sum(unique(pump$date) %in% metadata$date)
pump <- left_join(pump, metadata, by = "date")
pump %>%
filter(growth_days==0) %>%
ggplot(aes(x = t, y = mvc)) +
geom_point(alpha = .5, size = .75) +
geom_rect(data = filter(pump, date == 190417),
fill = NA, colour = "red", xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf) +
facet_wrap(~date) +
scale_x_continuous(breaks = c(0,3000,6000), limits = c(0,6000))
pumpfinal <- pump %>%
filter(growth_days==0, date != 190417, dowel_density != "0232")
pumpfinal %>%
ggplot(aes(x = t, y = mvc)) +
geom_point(alpha = .5, size = .75) +
facet_grid(pump_freq~dowel_density) +
scale_x_continuous(breaks = c(0,3000,6000), limits = c(0,6000))
trapdata <- lapply(trapfiles, function(x) read_csv(paste0("../data/sediment traps/",x)))
names(trapdata) <- trapdate
x <- trapdata
tidytrap <- lapply(seq_along(x), function(i) {
select(x[[i]], station = 1, pre = contains("pre"), post = contains("post"), sed = contains("sed")) %>%
mutate(date = names(x)[i]) %>%
mutate_at(vars(pre,post,sed,date), as.numeric)
}
)
trap <- bind_rows(tidytrap) %>%
filter(!is.na(sed))
trap
lm(sed~station, data = trap) %>% summary()
trap %>%
group_by(date) %>%
mutate(mean = mean(sed)) %>%
arrange(mean) %>%
ggplot(aes(x = factor(date, levels = unique(date)), y = sed)) +
geom_boxplot() +
labs(x = "date", y = "sediment mass (mg/trap)") +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
trapfinal <- left_join(trap, metadata, by = "date") %>%
filter(date %in% pumpfinal$date)
trapfinal %>%
group_by(date) %>%
mutate(mean = mean(sed)) %>%
arrange(mean) %>%
ggplot(aes(x = factor(date, levels = unique(date)), y = sed)) +
geom_boxplot() +
labs(x = "date", y = "sediment mass (mg/trap)") +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
# flows in ml/s:
flow <- c(131, 132, 132, 131, 134, 129, 130, 129, 130, 129, 130, 127, 127, 127, 126,
123, 126, 125, 124, 125, 127, 125, 123, 122, 125, 124, 118, 123, 125, 125,
120, 122, 124, 126, 122, 117, 123, 118, 120, 120, 121, 118, 118, 118, 119,
118, 120, 117, 117, 114, 115, 115, 116, 112, 112, 110, 111, 108, 105, 105,
102, 100, 100, 102)
# times in fractional hrs of day:
time <- c(12.13333, 12.21667, 12.28333, 12.41667, 12.5, 12.56667, 12.6, 13.11667,
13.15, 13.18333, 13.58333, 13.61667, 13.65, 14.25, 14.28333, 14.31667,
14.35, 14.38333, 14.68333, 14.71667, 14.75, 14.78333, 14.81667, 14.85,
14.88333, 14.93333, 15.35, 15.38333, 15.41667, 15.45, 15.48333, 15.76667,
15.8, 15.86667, 15.9, 15.93333, 15.96667, 16.18333, 16.23333, 16.28333,
16.31667, 16.33333, 16.36667, 16.55, 16.58333, 16.61667, 16.81667, 16.85,
16.9, 16.93333, 16.98333, 17.03333, 17.06667, 17.2, 17.23333, 17.35,
17.36667, 17.53333, 17.58333, 17.61667, 17.73333, 17.75, 17.78333, 17.8)
#flow start time:
t_0 <- 11.59166667
#time at which flume was drained to top of test-array holding basin
t_b <- 16.96666667
#time at which basin was drained
t_f <- 17.825
#polynomial model fits:
fits <- lapply(1:4, function(x) {lm(flow ~ poly(time, x, raw = TRUE))})
#finite integral calculator
poly_fin_integr <- function(model,lim1,lim2) {
sum(coefficients(model)/(1:length(coefficients(model)))*
lim2^(1:length(coefficients(model))))-
sum(coefficients(model)/(1:length(coefficients(model)))*
lim1^(1:length(coefficients(model))))
}
estimates <- lapply(fits, function(x) poly_fin_integr(x, lim1 = t_0, lim2 = t_b))
#convert from mL/s*h to cubic m: 1 mL/s*h = 3600 mL = 3.6 L = 0.0036 cubic m
estimates <- unlist(estimates)*.0036
names(estimates) <- c("linear", "quadratic", "cubic", "4th order")
estimates
library(lme4)
fits <- lmList(data = pumpfinal, log(mvc)~t | date)
summary(fits)
cbind(pumpfinal, pred = predict(fits)) %>%
ggplot() +
geom_point(aes(x = t, y = mvc), size = .75, alpha = .5) +
geom_line(aes(x = t, y = exp(pred)), color = "red") +
facet_grid(pump_freq~dowel_density) +
scale_x_continuous(breaks = c(0,3000,6000), limits = c(0,6000))
cbind(pumpfinal, resid = residuals(fits)) %>%
ggplot(aes(x = t, y = resid)) +
geom_point() +
geom_smooth()
fitdata <- coefficients(fits) %>%
cbind(date = as.numeric(row.names(coefficients(fits)))) %>%
left_join(metadata, by = "date")
fitdata %>%
ggplot(aes(x = dowel_density, y = pump_freq, fill = -t, label = round(-t,7))) +
geom_tile() +
geom_text() +
scale_fill_gradient(low = "red", high = "white")
# THIS CODE WAS USED IN THE FIRST VERSION BUT SHOULD BE LEFT OUT OF ERROR PROPOGATION VERSION
#
# fitdata[fitdata$date==190802,"t"] <- (fitdata[fitdata$date==190729,"t"] +
#                                         fitdata[fitdata$date==190321,"t"])/2
#
# fitdata
hist(trapfinal$sed, breaks = 10, density = 10)
final <- trapfinal %>%
group_by(date) %>%
summarise(m_trap = mean(sed)/1000) %>% #average sediment in trap converted from mg to g
mutate(m_s = m_trap*1.95*.6/(pi*.0127^2)) %>% #times test section area divided by area of 1 trap
left_join(fitdata, by = "date") %>%
mutate(k_s = m_s/200/(1-exp(t*6000))*(-t))
final %>%
ggplot(aes(x = dowel_density, y = pump_freq, fill = k_s, label = round(k_s,7))) +
geom_tile() +
geom_text() +
scale_fill_gradient(low = "red", high = "white")
# THIS CODE WAS USED IN THE FIRST VERSION BUT SHOULD BE LEFT OUT OF ERROR PROPOGATION VERSION
# final[final$date==190802,"k_s"] <- (final[final$date==190729,"k_s"] +
#                                       final[final$date==190321,"k_s"])/2
bgvals <- final %>%
filter(dowel_density=="0000") %>%
transmute(pump_freq, k_bg = -t - k_s) %>%
arrange(pump_freq)
bgvals
final <- left_join(final, bgvals, by = "pump_freq")
final <- final %>%
mutate(k_c = -t - k_s - k_bg)
final %>%
ggplot(aes(x = dowel_density, y = pump_freq, fill = k_c, label = round(k_c,7))) +
geom_tile() +
geom_text() +
scale_fill_gradient(low = "red", high = "white")
final %>%
ggplot(aes(x = as.numeric(pump_freq), y = k_c, color = dowel_density)) +
geom_line()
#temp in flume measured at 22.2C with a calibrated thermometer
#plugged into https://www.engineeringtoolbox.com/water-dynamic-kinematic-viscosity-d_596.html
visc = 9.509e-7 #kinematic viscosity, m2/s
d = .003175 #dowel diameter
final <- final %>%
transmute(frontal_area = as.numeric(dowel_density)*.003175,
u = as.numeric(pump_freq)/500, #velocity
Re = u*.003175/visc, #Reynolds #
k_t = -t,
k_c, k_s, k_bg) %>%
mutate(eta = k_c/u/frontal_area) %>%
mutate(eta = eta * 2.43/(1.95*.4*.6)) # don't forget to correct for time out of test section!
final %>%
filter(frontal_area != 0) %>%
ggplot(aes(x = Re, y = eta, color = factor(frontal_area))) +
geom_line() +
geom_point()
